
/**
 * Gift-Voucher (ID: 989232) – custom amount + recipient e-mail
 * -----------------------------------------------------------------------------
 * – Buyer chooses any amount ≥ €50
 * – Only one voucher per cart – all other items are removed
 * – Redirect straight to special Checkout page
 * – Extra checkout field asks for the recipient e-mail (required)
 * – Coupon (fixed-cart) is created as soon as the order is paid (processing /
 *   completed) and stored on the order for later reference
 * – HTML e-mail with the code is sent to the recipient automatically
 * – Buyer sees status banners on the Thank-you page and inside their order e-mails
 * -----------------------------------------------------------------------------
 */

/* ================================================================
   CONFIGURATION
   ============================================================== */
const VOUCHER_PRODUCT_ID = 989232;   // simple or parent product ID
const VOUCHER_MIN_AMOUNT = 50;       // € – minimum allowed
const VOUCHER_EXPIRY     = '+1 year';// human-readable for strtotime()
const CHECKOUT_URL       = 'https://butt.gr/checkout-2/'; // redirect target

/* ================================================================
   0. HELPERS
   ============================================================== */
function gv_cart_contains_voucher() : bool {
    foreach ( WC()->cart->get_cart() as $item ) {
        if ( intval( $item['product_id'] ) === VOUCHER_PRODUCT_ID ) {
            return true;
        }
    }
    return false;
}
function gv_order_has_voucher( WC_Order $order ) : bool {
    foreach ( $order->get_items() as $item ) {
        if ( intval( $item->get_product_id() ) === VOUCHER_PRODUCT_ID ) {
            return true;
        }
    }
    return false;
}
function gv_order_is_voucher_only( WC_Order $order ) : bool {
    foreach ( $order->get_items() as $item ) {
        if ( intval( $item->get_product_id() ) !== VOUCHER_PRODUCT_ID ) {
            return false; // another product found
        }
    }
    return true;
}

/* ================================================================
   1. MAKE VOUCHER PURCHASABLE EVEN WITH 0 PRICE
   ============================================================== */
add_filter( 'woocommerce_is_purchasable', function ( $purchasable, $product ) {
    return ( $product->get_id() === VOUCHER_PRODUCT_ID ) ? true : $purchasable;
}, 10, 2 );

/* ================================================================
   2. AMOUNT INPUT ON THE SINGLE-PRODUCT PAGE
   ============================================================== */
add_action( 'woocommerce_before_add_to_cart_button', function () {
    global $product;
    if ( $product->get_id() !== VOUCHER_PRODUCT_ID ) { return; }

    wc_print_notices(); // show notices near the button

    echo '<div class="custom-voucher-price-field" style="margin-bottom:1em">';
    echo '<label for="custom_voucher_amount">' . esc_html__( 'Enter voucher amount (minimum €50)', 'woocommerce' ) . '</label> ';
    echo '<input type="number" id="custom_voucher_amount" name="custom_voucher_amount" min="' . esc_attr( VOUCHER_MIN_AMOUNT ) . '" step="0.01" required>';
    echo '</div>';
}, 10 );

/* 3. Validation before add-to-cart */
add_filter( 'woocommerce_add_to_cart_validation', function ( $passed, $product_id, $qty ) {
    if ( $product_id === VOUCHER_PRODUCT_ID && isset( $_POST['custom_voucher_amount'] ) ) {
        $amount = floatval( $_POST['custom_voucher_amount'] );
        if ( $amount < VOUCHER_MIN_AMOUNT ) {
            wc_add_notice( sprintf( __( 'The voucher amount must be at least %s€.', 'woocommerce' ), VOUCHER_MIN_AMOUNT ), 'error' );
            return false;
        }
    }
    return $passed;
}, 10, 3 );

/* 4. Store custom price inside the cart item */
add_filter( 'woocommerce_add_cart_item_data', function ( $cart_item_data, $product_id ) {
    if ( $product_id === VOUCHER_PRODUCT_ID && isset( $_POST['custom_voucher_amount'] ) ) {
        $cart_item_data['custom_voucher_price'] = floatval( $_POST['custom_voucher_amount'] );
        // generate a unique hash to force separate line-items when buying multiple vouchers
        $cart_item_data['unique_key'] = md5( microtime() . wp_rand() );
    }
    return $cart_item_data;
}, 10, 2 );

/* 5. Apply price in cart & checkout */
add_action( 'woocommerce_before_calculate_totals', function ( $cart ) {
    if ( did_action( 'woocommerce_before_calculate_totals' ) >= 2 ) { return; } // avoid looping
    foreach ( $cart->get_cart() as $item ) {
        if ( isset( $item['custom_voucher_price'] ) ) {
            $item['data']->set_price( $item['custom_voucher_price'] );
        }
    }
} );

/* ===================================================================== */
/*  6. KEEP ONLY THE *LAST* ADDED VOUCHER IN CART                        */
/* ===================================================================== */
add_action( 'woocommerce_add_to_cart', function ( $new_key, $product_id, $qty, $variation_id, $variation, $cart_item_data ) {
    if ( $product_id !== VOUCHER_PRODUCT_ID ) { return; }
    foreach ( WC()->cart->get_cart() as $key => $item ) {
        if ( $key !== $new_key ) {
            WC()->cart->remove_cart_item( $key ); // remove everything except the just‑added voucher
        }
    }
}, 20, 6 );

/* 7. Redirect directly to custom checkout */
add_action(
    'wp_enqueue_scripts',
    function () {
        if ( is_product() && (int) get_the_ID() === VOUCHER_PRODUCT_ID ) {

            // Build the JS as a plain-PHP string (double quotes allow PHP vars inside)
            $js = "
jQuery(function($){
    $(document.body).on('added_to_cart', function(e, frags, hash, btn){
        if (btn && btn.data('product_id') == '" . VOUCHER_PRODUCT_ID . "') {
            window.location.href = '" . CHECKOUT_URL . "';
        }
    });
});
";

            wp_add_inline_script( 'jquery', $js );
        }
    },
    20
);


/* 9. Server-side price check at checkout */
add_action( 'woocommerce_checkout_process', function () {
    foreach ( WC()->cart->get_cart() as $item ) {
        if ( isset( $item['custom_voucher_price'] ) && floatval( $item['custom_voucher_price'] ) < VOUCHER_MIN_AMOUNT ) {
            wc_add_notice( sprintf( __( 'The voucher amount must be at least %s€.', 'woocommerce' ), VOUCHER_MIN_AMOUNT ), 'error' );
        }
    }
} );

/* ================================================================
  10. EXTRA CHECKOUT FIELDS – recipient name & e-mail (OPTIONAL)
  ============================================================== */
add_action( 'woocommerce_before_checkout_billing_form', function ( $checkout ) {
    if ( ! gv_cart_contains_voucher() ) { return; }

    echo '<div class="gift-voucher-recipient gv-recipient-highlight">';
    echo '  <h3>' . esc_html__( 'Send as a gift (Optional)', 'woocommerce' ) . '</h3>';

    // MODIFIED: Added separate fields for first and last name
    echo '<p class="form-row form-row-first">';
    woocommerce_form_field( 'gv_recipient_first_name', array(
        'type'        => 'text',
        'required'    => false,
        'label'       => __( 'Recipient’s first name', 'woocommerce' ),
        'placeholder' => 'e.g. Jane',
    ), $checkout->get_value( 'gv_recipient_first_name' ) );
    echo '</p>';

    echo '<p class="form-row form-row-last">';
    woocommerce_form_field( 'gv_recipient_last_name', array(
        'type'        => 'text',
        'required'    => false,
        'label'       => __( 'Recipient’s last name', 'woocommerce' ),
        'placeholder' => 'e.g. Doe',
    ), $checkout->get_value( 'gv_recipient_last_name' ) );
    echo '</p>';
    echo '<div class="clear"></div>';

    // Recipient email is optional
    woocommerce_form_field( 'gv_recipient_email', array(
        'type'        => 'email',
        'required'    => false,
        'label'       => __( 'Recipient e-mail address (optional)', 'woocommerce' ),
        'placeholder' => 'friend@example.com',
        'class'       => array( 'form-row-wide' ),
    ), $checkout->get_value( 'gv_recipient_email' ) );

    // Help text updated for clarity
    echo '<p id="gv_recipient_email_description" class="gv-help">'
        . esc_html__( 'If you leave the e-mail blank, the voucher will be sent to your own e-mail address.', 'woocommerce' )
        . '</p>';

    echo '</div>';
}, 5);


/* -----------------------------------------------------------------
 * Validation: MODIFIED to only validate email if it's entered
 * ----------------------------------------------------------------- */
add_action( 'woocommerce_checkout_process', function () {
    if ( ! gv_cart_contains_voucher() ) { return; }

    // Only validate the e-mail if the field is not empty.
    if ( ! empty( $_POST['gv_recipient_email'] ) && ! is_email( $_POST['gv_recipient_email'] ) ) {
        wc_add_notice( __( 'The recipient e-mail address is not valid.', 'woocommerce' ), 'error' );
    }
});

/* -----------------------------------------------------------------
 * Save to order meta: MODIFIED to save first and last name
 * ----------------------------------------------------------------- */
add_action( 'woocommerce_checkout_update_order_meta', function ( $order_id ) {
    if ( ! empty( $_POST['gv_recipient_first_name'] ) ) {
        update_post_meta( $order_id, '_gv_recipient_first_name', sanitize_text_field( $_POST['gv_recipient_first_name'] ) );
    }
    if ( ! empty( $_POST['gv_recipient_last_name'] ) ) {
        update_post_meta( $order_id, '_gv_recipient_last_name', sanitize_text_field( $_POST['gv_recipient_last_name'] ) );
    }
    if ( ! empty( $_POST['gv_recipient_email'] ) ) {
        update_post_meta( $order_id, '_gv_recipient_email', sanitize_email( $_POST['gv_recipient_email'] ) );
    }
});

/* -----------------------------------------------------------------
 * Show in the admin order screen: MODIFIED for first and last name
 * ----------------------------------------------------------------- */
add_action( 'woocommerce_admin_order_data_after_billing_address', function ( $order ) {
    $first_name = $order->get_meta( '_gv_recipient_first_name', true );
    $last_name  = $order->get_meta( '_gv_recipient_last_name', true );
    $recipient  = $order->get_meta( '_gv_recipient_email', true );

    if ( $first_name || $last_name || $recipient ) {
        echo '<h3>' . esc_html__( 'Gift Voucher Recipient', 'woocommerce' ) . '</h3>';
        if ( $first_name || $last_name ) {
             echo '<p><strong>' . esc_html__( 'Name', 'woocommerce' ) . ':</strong> ' . esc_html( trim( $first_name . ' ' . $last_name ) ) . '</p>';
        }
        if ($recipient) {
            echo '<p><strong>' . esc_html__( 'E-mail (Sent to)', 'woocommerce' ) . ':</strong> ' . esc_html( $recipient ) . '</p>';
        }
    }
});

/* -----------------------------------------------------------------
 * Quick highlight styling
 * ----------------------------------------------------------------- */
add_action( 'wp_head', function () { ?>
    <style>
        .gv-recipient-highlight{ background:#FFF8E1; border:2px dashed #1b5e20; padding:1.5rem 1.5rem 1rem; margin-bottom:2rem; border-radius:6px; }
        .gv-recipient-highlight h3{ margin-top:0; font-weight:600; }
        #gv_recipient_email_description { display: block; margin-top: .5rem; color: #000f9f; font-size: .875rem; }
        .gv-recipient-highlight input { background-color: #fff !important; }
    </style>
<?php } );

/* ================================================================
  11. CREATE COUPON AS SOON AS PAYMENT CLEARS
  ============================================================== */
function gv_create_coupon_from_order( $order_id ) {
    $order = wc_get_order( $order_id );

    if ( ! $order || $order->get_meta( '_gv_coupon_code', true ) ) { return; }
    if ( ! gv_order_has_voucher( $order ) ) { return; }

    $unit_amount = 0;
    foreach ( $order->get_items() as $item ) {
        if ( intval( $item->get_product_id() ) === VOUCHER_PRODUCT_ID ) {
            $unit_amount = $item->get_subtotal() / max( 1, $item->get_quantity() );
            break;
        }
    }
    if ( $unit_amount <= 0 ) { return; }

    $code         = 'GV-' . strtoupper( wp_generate_password( 10, false ) );
    $date_expires = ( new DateTime( VOUCHER_EXPIRY ) )->format( 'Y-m-d H:i:s' );

    $coupon = new WC_Coupon();
    $coupon->set_code( $code );
    $coupon->set_discount_type( 'fixed_cart' );
    $coupon->set_amount( $unit_amount );
    //$coupon->set_usage_limit( 1 );
    $coupon->set_date_expires( $date_expires );
    $coupon->set_description( 'Gift-voucher from order #' . $order->get_id() );
    $coupon->save();

    $order->update_meta_data( '_gv_coupon_code',   $code );
    $order->update_meta_data( '_gv_coupon_amount', $unit_amount );
    $order->save();
}
add_action( 'woocommerce_order_status_processing', 'gv_create_coupon_from_order', 5 );
add_action( 'woocommerce_order_status_completed',  'gv_create_coupon_from_order', 5 );

/* ================================================================
  12. SEND COUPON TO RECIPIENT OR BUYER
  ============================================================== */
function gv_send_coupon_to_recipient( $order_id, $order = null ) {
    if ( ! $order ) { $order = wc_get_order( $order_id ); }
    if ( ! gv_order_has_voucher( $order ) ) { return; }
    if ( $order->get_meta( '_gv_recipient_sent', true ) ) { return; }

    // --- Gather data (MODIFIED for first/last name) ---
    $recipient_first_name = $order->get_meta( '_gv_recipient_first_name', true );
    $recipient_last_name  = $order->get_meta( '_gv_recipient_last_name', true );
    $recipient_full_name  = trim( $recipient_first_name . ' ' . $recipient_last_name );
    $recipient_email      = $order->get_meta( '_gv_recipient_email', true );
    $code                 = $order->get_meta( '_gv_coupon_code',     true );
    $amount               = $order->get_meta( '_gv_coupon_amount',   true );
    $buyer_email          = $order->get_billing_email();
$buyer_name = trim( $order->get_billing_first_name() . ' ' . $order->get_billing_last_name() );    $blogname             = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );
    $amount_html          = wc_price( $amount );

    // --- Determine target and email content ---
    $is_gift = ! empty( $recipient_email ) && is_email( $recipient_email );
    $target_email = $is_gift ? $recipient_email : $buyer_email;

    if ( ! $target_email || ! is_email( $target_email ) || empty( $code ) ) { return; }

    if ( $is_gift ) {
        // --- CONTENT FOR A GIFT RECIPIENT ---
        $subject = sprintf( __( 'You have received a gift voucher from %s!', 'woocommerce' ), $blogname );
        $greeting = $recipient_full_name ? sprintf( __( 'Hi %s,', 'woocommerce' ), esc_html( $recipient_full_name ) ) : __( 'Hi there,', 'woocommerce' );
        $body  = '<p>' . $greeting . '</p>';
        $body .= '<p>' . sprintf( __( 'You have received a digital gift voucher worth %1$s from %2$s.', 'woocommerce' ), $amount_html, esc_html($buyer_name) ?: esc_html($buyer_email) ) . '</p>';
    } else {
        // --- CONTENT FOR THE BUYER ---
        $subject = sprintf( __( 'Your gift voucher from %s', 'woocommerce' ), $blogname );
        $greeting = $buyer_name ? sprintf( __( 'Hi %s,', 'woocommerce' ), esc_html( $buyer_name ) ) : __( 'Hi there,', 'woocommerce' );
        $body  = '<p>' . $greeting . '</p>';
        $body .= '<p>' . sprintf( __( 'Thank you for your purchase! Here is your gift voucher worth %s.', 'woocommerce' ), $amount_html ) . '</p>';
    }

    // --- Common email body parts ---
    $body .= '<p style="font-size:24px;font-weight:700;letter-spacing:2px;border:2px dashed #1b5e20;padding:8px 16px;display:inline-block;">' . esc_html( $code ) . '</p>';
    $body .= '<p>' . __( 'You can use this code once within a year during checkout on', 'woocommerce' ) . ' ' . esc_html( $blogname ) . '.</p>';

    // --- Send and flag ---
    $mailer = WC()->mailer();
    $mailer->send( $target_email, $subject, $mailer->wrap_message( $subject, $body ) );

    $order->update_meta_data( '_gv_recipient_sent', 'yes' );
    $order->save();
}
add_action( 'woocommerce_order_status_processing', 'gv_send_coupon_to_recipient', 15, 1 );
add_action( 'woocommerce_order_status_completed',  'gv_send_coupon_to_recipient', 15, 1 );

/* ================================================================
  13. THANK-YOU PAGE MESSAGES (buyer view)
  ============================================================== */
add_action( 'woocommerce_thankyou', function ( $order_id ) {
    $order = wc_get_order( $order_id );
    if ( ! gv_order_has_voucher( $order ) ) { return; }

    $code                 = $order->get_meta( '_gv_coupon_code',     true );
    $recipient_first_name = $order->get_meta( '_gv_recipient_first_name', true );
    $recipient_last_name  = $order->get_meta( '_gv_recipient_last_name', true );
    $recipient_full_name  = trim( $recipient_first_name . ' ' . $recipient_last_name );
    $recipient_email      = $order->get_meta( '_gv_recipient_email', true );

    if ( $order->has_status( 'on-hold' ) || empty( $code ) ) {
        echo '<p style="padding:15px;border:2px solid #e8a700;background:#fffbe6;">' . __( 'Payment is pending — complete it to send the gift voucher.', 'woocommerce' ) . '</p>';
    } else {
        if ( ! empty( $recipient_email ) ) {
            $recipient_details = $recipient_full_name ? esc_html($recipient_full_name) . ' (' . esc_html($recipient_email) . ')' : esc_html($recipient_email);
            $message = sprintf( __( 'Success! The gift-voucher code has been e-mailed to %s.', 'woocommerce' ), '<strong>' . $recipient_details . '</strong>' );
        } else {
            $message = sprintf( __( 'Success! The gift-voucher code has been e-mailed to you at %s.', 'woocommerce' ), '<strong>' . esc_html( $order->get_billing_email() ) . '</strong>' );
        }
        echo '<p style="padding:15px;border:2px solid #28a745;background:#e9fbe9;">' . $message . '</p>';
    }
}, 20 );

/* ================================================================
  14. CUSTOM BLOCK INSIDE BUYER E-MAILS
  ============================================================== */
add_action( 'woocommerce_email_after_order_table', function ( $order, $sent_to_admin, $plain_text, $email ) {
    if ( ! in_array( $email->id, [ 'customer_processing_order', 'customer_completed_order', 'customer_on_hold_order' ], true ) ) { return; }
    if ( ! gv_order_has_voucher( $order ) ) { return; }

    $code                 = $order->get_meta( '_gv_coupon_code', true );
    $recipient_first_name = $order->get_meta( '_gv_recipient_first_name', true );
    $recipient_last_name  = $order->get_meta( '_gv_recipient_last_name', true );
    $recipient_full_name  = trim( $recipient_first_name . ' ' . $recipient_last_name );
    $recipient_email      = $order->get_meta( '_gv_recipient_email', true );

    if ( $email->id === 'customer_on_hold_order' || empty( $code ) ) {
        $text = __( 'Complete payment to send the gift voucher.', 'woocommerce' );
        $html = '<p style="padding:12px 16px;background:#fff4d6;border:2px solid #ffb400;margin:20px 0;">' . $text . '</p>';
        echo $plain_text ? "\n---\n{$text}\n---\n" : $html;
        return;
    }

    if ( ! empty( $recipient_email ) ) {
        $recipient_details_plain = $recipient_full_name ? $recipient_full_name . ' (' . $recipient_email . ')' : $recipient_email;
        $recipient_details_html  = $recipient_full_name ? esc_html($recipient_full_name) . ' (<strong>' . esc_html($recipient_email) . '</strong>)' : '<strong>' . esc_html($recipient_email) . '</strong>';
        $text = sprintf( __( 'The gift-code will be e-mailed to %s in a moment.', 'woocommerce' ), $recipient_details_plain );
        $html_text = sprintf( __( 'The gift-code will be e-mailed to %s in a moment.', 'woocommerce' ), $recipient_details_html );
    } else {
        $text = __( 'Your gift voucher has been sent to you in a separate e-mail.', 'woocommerce' );
        $html_text = $text;
    }

    $plain = "\n=== DIGITAL GIFT VOUCHER ===\n" . $text . "\n";
    $html  = '<p style="padding:12px 16px;background:#e9fbe9;border:2px solid #28a745;margin:20px 0;">✔ ' . $html_text . '</p>';
    echo $plain_text ? $plain : $html;
}, 20, 4 );

/* short heading tweak when basket contains nothing but voucher */
add_filter( 'woocommerce_email_heading_customer_processing_order', 'gv_email_heading', 10, 2 );
add_filter( 'woocommerce_email_heading_customer_completed_order',  'gv_email_heading', 10, 2 );
function gv_email_heading( $heading, $order ) {
    return ( gv_order_is_voucher_only( $order ) ) ? __( 'Your digital gift voucher', 'woocommerce' ) : $heading;
}

/* ================================================================
   15. FRONT-END JS VALIDATION (prevent form submission below €50)
   ============================================================== */
add_action( 'wp_footer', function () {
    if ( ! is_product( VOUCHER_PRODUCT_ID ) ) { return; }
    ?>
    <script>
    jQuery(function($){
        $('form.cart').on('submit', function(e){
            var price = parseFloat($('#custom_voucher_amount').val());
            if ( isNaN(price) || price < <?php echo (int) VOUCHER_MIN_AMOUNT; ?> ) {
                e.preventDefault();
                alert('<?php echo esc_js(
                    sprintf( __( 'The voucher amount must be at least %s€.', 'woocommerce' ),
                              VOUCHER_MIN_AMOUNT )
                ); ?>');
            }
        });
    });
    </script>
    <?php
}, 20 );   // 20 = run late so jQuery is definitely enqueued


